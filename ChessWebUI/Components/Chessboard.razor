@using ChessEngine
@using ChessWebUI.Components.Addons
@using ChessWebUI.Components.ChessPieces
@using MudBlazor.Extensions
@using Piece = ChessWebUI.Components.ChessPieces.Piece
@inject IDialogService DialogService
@code {

}
<MudItem>
    <div class="chessboard">
        @for (var row = 0; row < 8; row++)
        {
            for (var col = 0; col < 8; col++)
            {
                int currentSquare = row * 8 + col;
                <div class="square"
                     @onclick="@(() => OnSquareClick(currentSquare))"
                     style="background-color: @((row + col) % 2 == 0 ? "#CD3F3E" : "#1C2938");">

                    @if (VisualizeAttackList != null && VisualizeAttackList.Contains(currentSquare))
                    {
                        <div class="square-attack-overlay"></div>
                    }

                    @if (Board.GetPieceSymbolAtSquare(currentSquare) != '.')
                    {
                        <Piece PieceType="@(Board.GetPieceSymbolAtSquare(currentSquare))"/>
                    }
                </div>
            }
        }

    </div>
</MudItem>

@code {

    private async Task OpenDialogAsync(int square, Player player)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var parameters = new DialogParameters<PromotionDialog>
        {
            { Player => player, player }
        };

        var dialog = await DialogService.ShowAsync<PromotionDialog>("Simple Dialog", parameters, options);
        
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            char.TryParse(result.Data.ToString(), out char piece);
            Board.PromotePawn(square, piece);
        }
        else
        {
            Board.PromotePawn(square, player == Player.White ? 'Q' : 'q');
        }
    }
}